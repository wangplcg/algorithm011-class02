/**
 * 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
 * 示例 1:
 * 输入: [1,2,3,4,5,6,7] 和 k = 3
 * 输出: [5,6,7,1,2,3,4]
 * 解释:          1 2 3 4 5 6 7
 * 向右旋转 1 步: [7,1,2,3,4,5,6]
 * 向右旋转 2 步: [6,7,1,2,3,4,5]
 * 向右旋转 3 步: [5,6,7,1,2,3,4]
 *
 * 解决方案 1: 暴力法 数组位移
 * 解决方案 2： 数组copy， 按照index起始，依次输出元素到指定数组
 * 解决方案 3： 翻转三次， 首先将整个nums 翻转，然后根据位移k，得到分界点，然后再继续翻转得到结果
 */
public void rotate(int[] nums, int k) {
    // 先将 整个数组进行翻转
    int i = 0;
    int j = nums.length - 1;
    int temp;
    while (i < j) {
        temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
        i++;
        j--;
    }

    // 利用k 将数据分为两部分 进行翻转
    int i1 = 0;
    int j1 = k % nums.length - 1;
    while (i1 < j1) {
        temp = nums[i1];
        nums[i1] = nums[j1];
        nums[j1] = temp;
        i1++;
        j1--;
    }

    int i2 = k % nums.length;
    int j2 = nums.length - 1;
    while (i2 < j2) {
        temp = nums[i2];
        nums[i2] = nums[j2];
        nums[j2] = temp;
        i2++;
        j2--;
    }
}