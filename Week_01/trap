    /**
     * 42. 接雨水
     * 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
     * 暴力法：
     *     根据题目意思理解，从结点向两边遍历，寻找两边最大值的最小值 进行求解
     */
    public int trap1 (int[] height) {
        int ans = 0;
        for (int i = 0; i < height.length; i++) {
            int l = i, r = i;
            int maxLeft = height[i];
            while (l >= 0) {
                maxLeft = Math.max(maxLeft, height[l--]);
            }
            int maxRight = height[i];
            while (r < height.length) {
                maxRight = Math.max(maxRight, height[r++]);
            }
            ans += Math.min(maxLeft, maxRight) - height[i];
        }
        return ans;
    }

    @Test
    public void testTrap2() {
        int i = trap2(new int[]{0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1});
        System.out.println(i);
    }


    /**
     * 42.1 接雨水
     *  压栈法
     *      如果碰到比 栈顶元素 >= 的元素时，则进行处理
     */
    public int trap2(int[] height) {
        int ans = 0;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < height.length; i++) {
            int h = height[i];
            // 栈为空入栈 或者当前元素值小于栈顶元素值， 则将元素值压栈
            while (!stack.empty() && h >= height[stack.peek()]) {
                // 当前元素值 大于等于栈顶元素
                Integer top = stack.pop();
                if (stack.empty()) {
                    stack.push(i);
                    break;
                }
                int distanct = i - stack.peek() - 1;
                ans += (Math.min(height[stack.peek()], h) - height[top]) * distanct;
            }
            stack.push(i);
        }
        return ans;
    }


    /**
     * 接雨水 解法3
     * 双指针解法
     * 如果left_max<right_max成立，那么它就知道自己能存多少水了。无论右边将来会不会出现更大的right_max，都不影响这个结果
     * 按照左右进行计算，同时求出  leftMax  and  rightMax
     *
     *
     * max_left 左边
     * max_right 右边
     */
    public int trap3(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int leftMax = 0;
        int rightMax = 0;
        int ans = 0;
        while (left < right) {
            if (height[left] < height[right]) {
                leftMax = Math.max(height[left], leftMax);
                ans += leftMax - height[left++];
            } else {
                rightMax = Math.max(height[right], rightMax);
                ans += rightMax - height[right--];
            }
        }
        return ans;
    }
